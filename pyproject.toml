[project]
authors = [{ name = "raceychan", email = "raceychan@gmail.com" }]
description = "A dependency injection library for Python, Optimized for serverless applications"
dynamic = ["version"]
license = "MIT"
name = "ididi"
readme = "README.md"
requires-python = ">= 3.9"

classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Information Technology",
  "Intended Audience :: System Administrators",
  "Intended Audience :: Developers",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
]

[project.optional-dependencies]
graphviz = ["python-graphviz>=0.20.3,<0.21"]

[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[tool.hatch.version]
path = "ididi/__init__.py"

[tool.setuptools]
py-modules = ["ididi"]

[tool.pytest.ini_options]
addopts = "--strict-markers --capture=no"
filterwarnings = ["ignore::DeprecationWarning"]
markers = [
  "integration_test: marks tests as slow integration tests (deselect with '-m \"not integration_test\"')",
  "debug: marks tests as debug tests (deselect with '-m \"not debug\"')",
  "benchmark: marks tests as benchmark tests (deselect with '-m \"not benchmark\"')",
]
testpaths = ["tests"]
asyncio_mode = "auto"

[tool.coverage.run]
omit = [
  # omit anything in a .local directory anywhere
  "*/utils/*",
]

[tool.pyright]
exclude = ["tests"]
include = ["ididi/*.py"]
python_version = "3.9"
typeCheckingMode = "strict"

[tool.pixi.project]
channels = ["conda-forge"]
platforms = ["linux-64"]

[tool.pixi.environments]
default = { solve-group = "default" }
dev = { features = ["dev"], solve-group = "default" }
publish = { features = ["publish"], solve-group = "default" }
test = { features = ["test"], solve-group = "default" }

[tool.pixi.dependencies]
python = "3.9.0"
typing_extensions = ">=4.12.2,<5"

[tool.pixi.feature.dev.dependencies]
jupyter = ">=1.1.1,<2"
mkdocs-material = ">=9.5.44,<10"

[tool.pixi.feature.test.dependencies]
pytest = ">=8.3.3"
pytest-asyncio = ">=0.24.0,<0.25"
pytest-cov = ">=4.1.0"
python-graphviz = ">=0.20.3,<0.21"

[tool.pixi.feature.publish.dependencies]
hatch = ">=1.13.0,<2"
twine = ">=5.1.1,<6"

[tool.pixi.feature.publish.tasks]
# Build into a wheel using hatch
build = { cmd = "hatch build", inputs = ["didi/*"], outputs = ["dist/*"] }
# Upload to custom GCP registry using twine
check = { cmd = "twine check" }
publish = { cmd = "twine upload --skip-existing dist/*", depends-on = [
  "build",
] }
test-publish = { cmd = "twine upload --repository testpypi --skip-existing dist/" }

patch = { cmd = "hatch version patch" }
