import pytest

from ididi import DependencyGraph

# from ididi.errors import NodeCreationErrorChain, UnsolvableDependencyError

dg = DependencyGraph()


class Config:
    def __init__(self, env):
        self.env = env


def config_factory() -> Config:
    return Config("dev")


"""
TODO: we need to fix the error generated by DependentNode.from_param
consider such case:

class TokenRegistry:
    def __init__(self, redis: Redis):
        self.redis = redis

@dg.node
def token_registry_factory() -> TokenRegistry:
    redis = Redis(
        host="localhost",
        port=6379,
        password="",
    )
    return TokenRegistry(redis)
"""


class DataBase:
    def __init__(self, config: Config):
        self.config = config


class CacheService:
    def __init__(self, config: Config):
        self.config = config


class AuthService:
    def __init__(self, db: DataBase, cache: CacheService):
        self.db = db
        self.cache = cache


class UserService:
    def __init__(self, auth: AuthService, db: DataBase):
        self.auth = auth
        self.db = db


class NotificationService:
    def __init__(self, config: Config):
        self.config = config


class EmailService:
    def __init__(self, notification: NotificationService, user: UserService):
        self.notification = notification
        self.user = user


class EventStore:
    def __init__(self, db: DataBase):
        self.db = db


@pytest.mark.skip(reason="TODO: fix the error")
@pytest.mark.debug
def test_improved_error():
    # BUG: this should not raise Error when config is overridden
    # with factory
    dg.static_resolve(EmailService)
